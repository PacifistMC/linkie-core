plugins {
    id("org.jetbrains.kotlin.jvm") version("1.6.10")
    id("org.jetbrains.kotlin.plugin.serialization") version("1.6.10")
    id("java")
    id("maven-publish")
    id("maven")
    id("signing")
}

group "me.shedaniel"
version = "1.0." + (System.getenv("GITHUB_RUN_NUMBER") == null ? "9999" : System.getenv("GITHUB_RUN_NUMBER"))

sourceCompatibility = targetCompatibility = 1.8

test {
    useJUnitPlatform()
}

tasks.test {
    filter {
        includeTestsMatching("me.shedaniel.linkie.core.tests.*")
    }
}

repositories {
    mavenCentral()
    maven { 
        url "https://maven.fabricmc.net"
        metadataSources {
            it.mavenPom()
            it.ignoreGradleMetadataRedirection()
        }
    }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://maven.quiltmc.org/repository/release" }
}

dependencies {
    compile("com.github.Chocohead:Tiny-Mappings-Parser:d96d4070293d9e7054693c21552eb1eb2b149679")
    compile("org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.10")
    compile("org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2")
    compile("org.jetbrains.kotlin:kotlin-reflect:1.6.10")
    compile("ch.qos.logback:logback-classic:1.2.3")
    compile("org.dom4j:dom4j:2.1.3")
    compile("net.fabricmc:stitch:0.5.1+build.77") {
        exclude group: "net.fabricmc", module: "tiny-mappings-parser"
    }

    testCompile("org.junit.jupiter:junit-jupiter:5.6.2")
    testCompile("org.jetbrains.kotlin:kotlin-test-junit5:1.4.21")

    compile("com.soywiz.korlibs.korio:korio:$korlibs_version")
    compile("com.squareup.okio:okio-multiplatform:$okio_version")
    compile("org.quiltmc:mappings-hasher:1.1.1:all")
}

compileKotlin {
    kotlinOptions.suppressWarnings = true
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions {
        freeCompilerArgs = ["-Xinline-classes", "-Xopt-in=kotlin.RequiresOptIn"]
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier("sources")
    from sourceSets.main.allSource
}

task javadocs(type: Javadoc) {
    source = sourceSets.main.allJava
}

task javadocsJar(type: Jar, dependsOn: javadocs) {
    classifier("javadocs")
    javadocs.failOnError false
    from javadocs.destinationDir
}

publishing {
    publications {
        publication(MavenPublication) {
            from components.java
            artifact(sourcesJar)
            artifact(javadocsJar)
        }
    }

    repositories {
        if (System.getenv("MAVEN_PASS") != null) {
            maven {
                url = "https://deploy.shedaniel.me/"
                credentials {
                    username = "shedaniel"
                    password = System.getenv("MAVEN_PASS")
                }
            }
        }
    }
}
